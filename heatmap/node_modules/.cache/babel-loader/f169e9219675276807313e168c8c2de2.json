{"ast":null,"code":"var _jsxFileName = \"/Users/rhazsolomon/Documents/University/swen422/swen422_assignment2/heatmap/src/components/BasicMap/BasicMap.js\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport { scaleLinear } from \"d3-scale\";\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\"\n};\nconst popScale = scaleLinear().domain([0, 100000000, 1400000000]).range([\"#FF0000\", \"#00FF00\", \"#0000FF\"]);\nconst gdpScale = scaleLinear().domain([0, 20000, 400000]).range([\"#FF0000\", \"#00FF00\", \"#0000FF\"]);\n\nclass BasicMap extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderMap = () => {\n      return React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205,\n          rotation: [-11, 0, 0]\n        },\n        width: 980,\n        height: 551,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/examples/choropleth-map/static/world-50m-with-population.json\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, (geographies, projection) => geographies.map((geography, i) => React.createElement(Geography, {\n        key: i,\n        geography: geography,\n        projection: projection,\n        onClick: this.handleClick,\n        style: {\n          default: {\n            fill: this.computeFill(geography, this.props.metric),\n            stroke: \"#607D8B\",\n            strokeWidth: 0.75,\n            outline: \"none\"\n          },\n          hover: {\n            fill: \"#263238\",\n            stroke: \"#607D8B\",\n            strokeWidth: 0.75,\n            outline: \"none\"\n          },\n          pressed: {\n            fill: \"#263238\",\n            stroke: \"#607D8B\",\n            strokeWidth: 0.75,\n            outline: \"none\"\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })))));\n    };\n  }\n\n  computeFill(geography, metric) {\n    // return gdpScale(geography.properties.gdp_md_est)\n    console.log(metric);\n\n    if (metric === \"gdp\") {\n      return gdpScale(geography.properties.gdp_md_est);\n    } else {\n      return popScale(geography.properties.pop_est);\n    }\n  }\n\n  render() {\n    // console.log(this.props.metric)\n    return React.createElement(\"div\", {\n      style: wrapperStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.renderMap());\n  }\n\n}\n\nexport default BasicMap;","map":{"version":3,"sources":["/Users/rhazsolomon/Documents/University/swen422/swen422_assignment2/heatmap/src/components/BasicMap/BasicMap.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","scaleLinear","wrapperStyles","width","maxWidth","margin","popScale","domain","range","gdpScale","BasicMap","renderMap","scale","rotation","height","geographies","projection","map","geography","i","handleClick","default","fill","computeFill","props","metric","stroke","strokeWidth","outline","hover","pressed","console","log","properties","gdp_md_est","pop_est","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\nimport { scaleLinear } from \"d3-scale\"\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n}\n\nconst popScale = scaleLinear()\n  .domain([0,100000000,1400000000])\n  .range([\"#FF0000\",\"#00FF00\",\"#0000FF\"])\n\nconst gdpScale = scaleLinear()\n  .domain([0, 20000, 400000])\n  .range([\"#FF0000\",\"#00FF00\",\"#0000FF\"])\n\n\n\nclass BasicMap extends Component {\n\n  computeFill(geography, metric){\n    // return gdpScale(geography.properties.gdp_md_est)\n    console.log(metric)\n    if (metric ===  \"gdp\") {\n      return gdpScale(geography.properties.gdp_md_est)\n    } else {\n      return popScale(geography.properties.pop_est)\n    }\n  }\n\n  renderMap = () => {\n      return (\n      <ComposableMap\n        projectionConfig={{\n          scale: 205,\n          rotation: [-11,0,0],\n        }}\n        width={980}\n        height={551}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n        }}\n        >\n        <ZoomableGroup center={[0,20]}>\n          <Geographies geography={ \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/examples/choropleth-map/static/world-50m-with-population.json\" }>\n            {(geographies, projection) => geographies.map((geography, i) => (\n              <Geography\n                key={ i }\n                geography={ geography }\n                projection={ projection }\n                onClick={ this.handleClick }\n                style={{\n                  default: {\n                    fill: this.computeFill(geography, this.props.metric),\n                    stroke: \"#607D8B\",\n                    strokeWidth: 0.75,\n                    outline: \"none\",\n                  },\n                  hover: {\n                    fill: \"#263238\",\n                    stroke: \"#607D8B\",\n                    strokeWidth: 0.75,\n                    outline: \"none\",\n                  },\n                  pressed: {\n                    fill: \"#263238\",\n                    stroke: \"#607D8B\",\n                    strokeWidth: 0.75,\n                    outline: \"none\",\n                  }\n                }}\n              />\n            ))}\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      )\n  }\n\n\n  render() {\n    // console.log(this.props.metric)\n    return (\n      <div style={wrapperStyles}>\n        {this.renderMap()}\n      </div>\n    )\n  }\n}\n\nexport default BasicMap"]},"metadata":{},"sourceType":"module"}